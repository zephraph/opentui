#!/usr/bin/env bun

import { readFile, writeFile, mkdir } from "fs/promises"
import * as path from "path"
import { DownloadUtils } from "../download-utils"

interface ParsersConfig {
  parsers: Array<{
    filetype: string
    language: {
      url: string
    }
    queries: {
      highlights: string[]
    }
  }>
}

interface GeneratedParser {
  filetype: string
  languagePath: string
  highlightsPath: string
}

const ASSETS_DIR = path.resolve(__dirname)
const CONFIG_PATH = path.resolve(__dirname, "../parsers-config.json")
const DEFAULT_PARSERS_PATH = path.resolve(__dirname, "../default-parsers.ts")

async function loadConfig(): Promise<ParsersConfig> {
  const configContent = await readFile(CONFIG_PATH, "utf-8")
  return JSON.parse(configContent)
}

async function downloadLanguage(filetype: string, languageUrl: string): Promise<string> {
  const languageDir = path.join(ASSETS_DIR, filetype)
  const languageFilename = path.basename(languageUrl)
  const languagePath = path.join(languageDir, languageFilename)

  const result = await DownloadUtils.downloadToPath(languageUrl, languagePath)

  if (result.error) {
    throw new Error(`Failed to download language for ${filetype}: ${result.error}`)
  }

  return "./" + path.relative(path.dirname(DEFAULT_PARSERS_PATH), languagePath)
}

async function downloadAndCombineQueries(filetype: string, queryUrls: string[]): Promise<string> {
  const queriesDir = path.join(ASSETS_DIR, filetype)
  const highlightsPath = path.join(queriesDir, "highlights.scm")

  const queryContents: string[] = []

  for (let i = 0; i < queryUrls.length; i++) {
    const queryUrl = queryUrls[i]
    console.log(`    Downloading query ${i + 1}/${queryUrls.length}: ${queryUrl}`)

    // Download directly without caching to avoid conflicts between different queries
    try {
      const response = await fetch(queryUrl)
      if (!response.ok) {
        console.warn(`Failed to download query from ${queryUrl}: ${response.statusText}`)
        continue
      }

      const content = await response.text()
      if (content.trim()) {
        queryContents.push(`; Query from: ${queryUrl}\n${content}`)
        console.log(`    ✓ Downloaded ${content.split("\n").length} lines`)
      }
    } catch (error) {
      console.warn(`Failed to download query from ${queryUrl}: ${error}`)
      continue
    }
  }

  const combinedContent = queryContents.join("\n\n")
  await writeFile(highlightsPath, combinedContent, "utf-8")

  console.log(`  Combined ${queryContents.length} queries into ${highlightsPath}`)

  return "./" + path.relative(path.dirname(DEFAULT_PARSERS_PATH), highlightsPath)
}

async function generateDefaultParsersFile(parsers: GeneratedParser[]): Promise<void> {
  const imports = parsers
    .map((parser) => {
      const safeFiletype = parser.filetype.replace(/[^a-zA-Z0-9]/g, "_")
      return `import ${safeFiletype}_highlights from "${parser.highlightsPath}" with { type: "file" }
import ${safeFiletype}_language from "${parser.languagePath}" with { type: "file" }`
    })
    .join("\n")

  const parserDefinitions = parsers
    .map((parser) => {
      const safeFiletype = parser.filetype.replace(/[^a-zA-Z0-9]/g, "_")
      return `  {
    filetype: "${parser.filetype}",
    queries: {
      highlights: [${safeFiletype}_highlights],
    },
    language: ${safeFiletype}_language,
  }`
    })
    .join(",\n")

  const fileContent = `// This file is generated by assets/update.ts - DO NOT EDIT MANUALLY
// Run 'bun assets/update.ts' to regenerate this file
// Last generated: ${new Date().toISOString()}

import type { FiletypeParserOptions } from "./types"

${imports}

export const DEFAULT_PARSERS: FiletypeParserOptions[] = [
${parserDefinitions},
]
`

  await writeFile(DEFAULT_PARSERS_PATH, fileContent, "utf-8")
  console.log(`Generated default-parsers.ts with ${parsers.length} parsers`)
}

async function main(): Promise<void> {
  try {
    console.log("Loading parsers configuration...")
    const config = await loadConfig()

    console.log(`Found ${config.parsers.length} parsers to process`)

    const generatedParsers: GeneratedParser[] = []

    for (const parser of config.parsers) {
      console.log(`Processing ${parser.filetype}...`)

      console.log(`  Downloading language...`)
      const languagePath = await downloadLanguage(parser.filetype, parser.language.url)

      console.log(`  Downloading ${parser.queries.highlights.length} highlight queries...`)
      const highlightsPath = await downloadAndCombineQueries(parser.filetype, parser.queries.highlights)

      generatedParsers.push({
        filetype: parser.filetype,
        languagePath,
        highlightsPath,
      })

      console.log(`  ✓ Completed ${parser.filetype}`)
    }

    console.log("Generating default-parsers.ts...")
    await generateDefaultParsersFile(generatedParsers)

    console.log("✅ Update completed successfully!")
  } catch (error) {
    console.error("❌ Update failed:", error)
    process.exit(1)
  }
}

if (import.meta.main) {
  main()
}

export { main as updateAssets }
